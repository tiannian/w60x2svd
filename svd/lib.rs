# ! [ doc = "Peripheral access API for W600 microcontrollers (generated using svd2rust v0.17.0)\n\nYou can find an overview of the API [here].\n\n[here]: https://docs.rs/svd2rust/0.17.0/svd2rust/#peripheral-api" ]
# ! [ deny ( const_err ) ]
# ! [ deny ( dead_code ) ]
# ! [ deny ( improper_ctypes ) ]
# ! [ deny ( legacy_directory_ownership ) ]
# ! [ deny ( missing_docs ) ]
# ! [ deny ( no_mangle_generic_items ) ]
# ! [ deny ( non_shorthand_field_patterns ) ]
# ! [ deny ( overflowing_literals ) ]
# ! [ deny ( path_statements ) ]
# ! [ deny ( patterns_in_fns_without_body ) ]
# ! [ deny ( plugin_as_library ) ]
# ! [ deny ( private_in_public ) ]
# ! [ deny ( safe_extern_statics ) ]
# ! [ deny ( unconditional_recursion ) ]
# ! [ deny ( unions_with_drop_fields ) ]
# ! [ deny ( unused_allocation ) ]
# ! [ deny ( unused_comparisons ) ]
# ! [ deny ( unused_parens ) ]
# ! [ deny ( while_true ) ]
# ! [ allow ( non_camel_case_types ) ]
# ! [ allow ( non_snake_case ) ]
# ! [ no_std ]
extern crate cortex_m ; # [ cfg ( feature = "rt" ) ]
extern crate cortex_m_rt ; extern crate bare_metal ; extern crate vcell ; use core :: ops :: Deref ; use core :: marker :: PhantomData ; # [ cfg ( feature = "rt" ) ]
extern "C" { } # [ doc ( hidden ) ]
pub union Vector { _handler : unsafe extern "C" fn ( ) , _reserved : u32 , } # [ cfg ( feature = "rt" ) ]
# [ doc ( hidden ) ]
# [ link_section = ".vector_table.interrupts" ]
# [ no_mangle ]
pub static __INTERRUPTS : [ Vector ; 0 ]
= [ ]
; # [ doc = r"Enumeration of all the interrupts" ]
# [ derive ( Copy , Clone , Debug ) ]
pub enum Interrupt { } unsafe impl bare_metal :: Nr for Interrupt { # [ inline ( always ) ]
fn nr ( & self ) -> u8 { match * self { } } } pub use cortex_m :: peripheral :: Peripherals as CorePeripherals ; # [ cfg ( feature = "rt" ) ]
pub use cortex_m_rt :: interrupt ; # [ cfg ( feature = "rt" ) ]
pub use self :: Interrupt as interrupt ; pub use cortex_m :: peripheral :: { CBP , CPUID , DCB , DWT , FPB , FPU , ITM , MPU , NVIC , SCB , SYST , TPIU , } ; # [ allow ( unused_imports ) ]
use generic :: * ; # [ doc = r"Common register and bit access and modify traits" ]
pub mod generic { use core :: marker ; # [ doc = "This trait shows that register has `read` method" ]
# [ doc = "" ]
# [ doc = "Registers marked with `Writable` can be also `modify`'ed" ]
pub trait Readable { } # [ doc = "This trait shows that register has `write`, `write_with_zero` and `reset` method" ]
# [ doc = "" ]
# [ doc = "Registers marked with `Readable` can be also `modify`'ed" ]
pub trait Writable { } # [ doc = "Reset value of the register" ]
# [ doc = "" ]
# [ doc = "This value is initial value for `write` method." ]
# [ doc = "It can be also directly writed to register by `reset` method." ]
pub trait ResetValue { # [ doc = "Register size" ]
type Type ; # [ doc = "Reset value of the register" ]
fn reset_value ( ) -> Self :: Type ; } # [ doc = "This structure provides volatile access to register" ]
pub struct Reg < U , REG > { register : vcell :: VolatileCell < U > , _marker : marker :: PhantomData < REG > , } unsafe impl < U : Send , REG > Send for Reg < U , REG > { } impl < U , REG > Reg < U , REG > where Self : Readable , U : Copy { # [ doc = "Reads the contents of `Readable` register" ]
# [ doc = "" ]
# [ doc = "You can read the contents of a register in such way:" ]
# [ doc = "```ignore" ]
# [ doc = "let bits = periph.reg.read().bits();" ]
# [ doc = "```" ]
# [ doc = "or get the content of a particular field of a register." ]
# [ doc = "```ignore" ]
# [ doc = "let reader = periph.reg.read();" ]
# [ doc = "let bits = reader.field1().bits();" ]
# [ doc = "let flag = reader.field2().bit_is_set();" ]
# [ doc = "```" ]
# [ inline ( always ) ]
pub fn read ( & self ) -> R < U , Self > { R { bits : self . register . get ( ) , _reg : marker :: PhantomData } } } impl < U , REG > Reg < U , REG > where Self : ResetValue < Type = U > + Writable , U : Copy , { # [ doc = "Writes the reset value to `Writable` register" ]
# [ doc = "" ]
# [ doc = "Resets the register to its initial state" ]
# [ inline ( always ) ]
pub fn reset ( & self ) { self . register . set ( Self :: reset_value ( ) ) } } impl < U , REG > Reg < U , REG > where Self : ResetValue < Type = U > + Writable , U : Copy { # [ doc = "Writes bits to `Writable` register" ]
# [ doc = "" ]
# [ doc = "You can write raw bits into a register:" ]
# [ doc = "```ignore" ]
# [ doc = "periph.reg.write(|w| unsafe { w.bits(rawbits) });" ]
# [ doc = "```" ]
# [ doc = "or write only the fields you need:" ]
# [ doc = "```ignore" ]
# [ doc = "periph.reg.write(|w| w" ]
# [ doc = "    .field1().bits(newfield1bits)" ]
# [ doc = "    .field2().set_bit()" ]
# [ doc = "    .field3().variant(VARIANT)" ]
# [ doc = ");" ]
# [ doc = "```" ]
# [ doc = "Other fields will have reset value." ]
# [ inline ( always ) ]
pub fn write < F > ( & self , f : F ) where F : FnOnce ( & mut W < U , Self > ) -> & mut W < U , Self > { self . register . set ( f ( & mut W { bits : Self :: reset_value ( ) , _reg : marker :: PhantomData } ) . bits ) ; } } impl < U , REG > Reg < U , REG > where Self : Writable , U : Copy + Default { # [ doc = "Writes Zero to `Writable` register" ]
# [ doc = "" ]
# [ doc = "Similar to `write`, but unused bits will contain 0." ]
# [ inline ( always ) ]
pub fn write_with_zero < F > ( & self , f : F ) where F : FnOnce ( & mut W < U , Self > ) -> & mut W < U , Self > { self . register . set ( f ( & mut W { bits : U :: default ( ) , _reg : marker :: PhantomData } ) . bits ) ; } } impl < U , REG > Reg < U , REG > where Self : Readable + Writable , U : Copy , { # [ doc = "Modifies the contents of the register" ]
# [ doc = "" ]
# [ doc = "E.g. to do a read-modify-write sequence to change parts of a register:" ]
# [ doc = "```ignore" ]
# [ doc = "periph.reg.modify(|r, w| unsafe { w.bits(" ]
# [ doc = "   r.bits() | 3" ]
# [ doc = ") });" ]
# [ doc = "```" ]
# [ doc = "or" ]
# [ doc = "```ignore" ]
# [ doc = "periph.reg.modify(|_, w| w" ]
# [ doc = "    .field1().bits(newfield1bits)" ]
# [ doc = "    .field2().set_bit()" ]
# [ doc = "    .field3().variant(VARIANT)" ]
# [ doc = ");" ]
# [ doc = "```" ]
# [ doc = "Other fields will have value they had before call `modify`." ]
# [ inline ( always ) ]
pub fn modify < F > ( & self , f : F ) where for < 'w > F : FnOnce ( & R < U , Self > , & 'w mut W < U , Self > ) -> & 'w mut W < U , Self > { let bits = self . register . get ( ) ; self . register . set ( f ( & R { bits , _reg : marker :: PhantomData } , & mut W { bits , _reg : marker :: PhantomData } ) . bits ) ; } } # [ doc = "Register/field reader" ]
# [ doc = "" ]
# [ doc = "Result of the [`read`](Reg::read) method of a register." ]
# [ doc = "Also it can be used in the [`modify`](Reg::read) method" ]
pub struct R < U , T > { pub ( crate ) bits : U , _reg : marker :: PhantomData < T > , } impl < U , T > R < U , T > where U : Copy { # [ doc = "Create new instance of reader" ]
# [ inline ( always ) ]
pub ( crate ) fn new ( bits : U ) -> Self { Self { bits , _reg : marker :: PhantomData , } } # [ doc = "Read raw bits from register/field" ]
# [ inline ( always ) ]
pub fn bits ( & self ) -> U { self . bits } } impl < U , T , FI > PartialEq < FI > for R < U , T > where U : PartialEq , FI : Copy + Into < U > { # [ inline ( always ) ]
fn eq ( & self , other : & FI ) -> bool { self . bits . eq ( & ( * other ) . into ( ) ) } } impl < FI > R < bool , FI > { # [ doc = "Value of the field as raw bits" ]
# [ inline ( always ) ]
pub fn bit ( & self ) -> bool { self . bits } # [ doc = "Returns `true` if the bit is clear (0)" ]
# [ inline ( always ) ]
pub fn bit_is_clear ( & self ) -> bool { ! self . bit ( ) } # [ doc = "Returns `true` if the bit is set (1)" ]
# [ inline ( always ) ]
pub fn bit_is_set ( & self ) -> bool { self . bit ( ) } } # [ doc = "Register writer" ]
# [ doc = "" ]
# [ doc = "Used as an argument to the closures in the [`write`](Reg::write) and [`modify`](Reg::modify) methods of the register" ]
pub struct W < U , REG > { # [ doc = "Writable bits" ]
pub ( crate ) bits : U , _reg : marker :: PhantomData < REG > , } impl < U , REG > W < U , REG > { # [ doc = "Writes raw bits to the register" ]
# [ inline ( always ) ]
pub unsafe fn bits ( & mut self , bits : U ) -> & mut Self { self . bits = bits ; self } } # [ doc = "Used if enumerated values cover not the whole range" ]
# [ derive ( Clone , Copy , PartialEq ) ]
pub enum Variant < U , T > { # [ doc = "Expected variant" ]
Val ( T ) , # [ doc = "Raw bits" ]
Res ( U ) , } } # [ doc = "Timer and Reset" ]
pub struct CLK { _marker : PhantomData < * const ( ) > } unsafe impl Send for CLK { } impl CLK { # [ doc = r"Returns a pointer to the register block" ]
# [ inline ( always ) ]
pub const fn ptr ( ) -> * const clk :: RegisterBlock { 0x4000_0000 as * const _ } } impl Deref for CLK { type Target = clk :: RegisterBlock ; # [ inline ( always ) ]
fn deref ( & self ) -> & Self :: Target { unsafe { & * CLK :: ptr ( ) } } } # [ doc = "Timer and Reset" ]
pub mod clk { # [ doc = r"Register block" ]
# [ repr ( C ) ]
pub struct RegisterBlock { # [ doc = "0x00 - 软件时钟门控使能寄存器" ]
pub sw_clkg_en : SW_CLKG_EN , # [ doc = "0x04 - 软件时钟掩码寄存器" ]
pub sw_clk_mask : SW_CLK_MASK , _reserved2 : [ u8 ; 4usize ]
, # [ doc = "0x0c - 软件复位控制寄存器" ]
pub sw_rst_ctrl : SW_RST_CTRL , # [ doc = "0x10 - 时钟分频配置寄存器" ]
pub sys_clk_div : SYS_CLK_DIV , # [ doc = "0x14 - 调试控制寄存器" ]
pub debug_ctrl : DEBUG_CTRL , # [ doc = "0x18 - I2S时钟控制寄存器" ]
pub i2s_clk_ctrl : I2S_CLK_CTRL , } # [ doc = "软件时钟门控使能寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sw_clkg_en](sw_clkg_en) module" ]
pub type SW_CLKG_EN = crate :: Reg < u32 , _SW_CLKG_EN > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _SW_CLKG_EN ; # [ doc = "`read()` method returns [sw_clkg_en::R](sw_clkg_en::R) reader structure" ]
impl crate :: Readable for SW_CLKG_EN { } # [ doc = "`write(|w| ..)` method takes [sw_clkg_en::W](sw_clkg_en::W) writer structure" ]
impl crate :: Writable for SW_CLKG_EN { } # [ doc = "软件时钟门控使能寄存器" ]
pub mod sw_clkg_en { # [ doc = "Reader of register SW_CLKG_EN" ]
pub type R = crate :: R < u32 , super :: SW_CLKG_EN > ; # [ doc = "Writer for register SW_CLKG_EN" ]
pub type W = crate :: W < u32 , super :: SW_CLKG_EN > ; # [ doc = "Register SW_CLKG_EN `reset()`'s with value 0x7fff" ]
impl crate :: ResetValue for super :: SW_CLKG_EN { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0x7fff } } impl R { } impl W { } } # [ doc = "软件时钟掩码寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sw_clk_mask](sw_clk_mask) module" ]
pub type SW_CLK_MASK = crate :: Reg < u32 , _SW_CLK_MASK > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _SW_CLK_MASK ; # [ doc = "`read()` method returns [sw_clk_mask::R](sw_clk_mask::R) reader structure" ]
impl crate :: Readable for SW_CLK_MASK { } # [ doc = "`write(|w| ..)` method takes [sw_clk_mask::W](sw_clk_mask::W) writer structure" ]
impl crate :: Writable for SW_CLK_MASK { } # [ doc = "软件时钟掩码寄存器" ]
pub mod sw_clk_mask { # [ doc = "Reader of register SW_CLK_MASK" ]
pub type R = crate :: R < u32 , super :: SW_CLK_MASK > ; # [ doc = "Writer for register SW_CLK_MASK" ]
pub type W = crate :: W < u32 , super :: SW_CLK_MASK > ; # [ doc = "Register SW_CLK_MASK `reset()`'s with value 0x7e" ]
impl crate :: ResetValue for super :: SW_CLK_MASK { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0x7e } } impl R { } impl W { } } # [ doc = "软件复位控制寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sw_rst_ctrl](sw_rst_ctrl) module" ]
pub type SW_RST_CTRL = crate :: Reg < u32 , _SW_RST_CTRL > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _SW_RST_CTRL ; # [ doc = "`read()` method returns [sw_rst_ctrl::R](sw_rst_ctrl::R) reader structure" ]
impl crate :: Readable for SW_RST_CTRL { } # [ doc = "`write(|w| ..)` method takes [sw_rst_ctrl::W](sw_rst_ctrl::W) writer structure" ]
impl crate :: Writable for SW_RST_CTRL { } # [ doc = "软件复位控制寄存器" ]
pub mod sw_rst_ctrl { # [ doc = "Reader of register SW_RST_CTRL" ]
pub type R = crate :: R < u32 , super :: SW_RST_CTRL > ; # [ doc = "Writer for register SW_RST_CTRL" ]
pub type W = crate :: W < u32 , super :: SW_RST_CTRL > ; # [ doc = "Register SW_RST_CTRL `reset()`'s with value 0x01ff_ffff" ]
impl crate :: ResetValue for super :: SW_RST_CTRL { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0x01ff_ffff } } impl R { } impl W { } } # [ doc = "时钟分频配置寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [sys_clk_div](sys_clk_div) module" ]
pub type SYS_CLK_DIV = crate :: Reg < u32 , _SYS_CLK_DIV > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _SYS_CLK_DIV ; # [ doc = "`read()` method returns [sys_clk_div::R](sys_clk_div::R) reader structure" ]
impl crate :: Readable for SYS_CLK_DIV { } # [ doc = "`write(|w| ..)` method takes [sys_clk_div::W](sys_clk_div::W) writer structure" ]
impl crate :: Writable for SYS_CLK_DIV { } # [ doc = "时钟分频配置寄存器" ]
pub mod sys_clk_div { # [ doc = "Reader of register SYS_CLK_DIV" ]
pub type R = crate :: R < u32 , super :: SYS_CLK_DIV > ; # [ doc = "Writer for register SYS_CLK_DIV" ]
pub type W = crate :: W < u32 , super :: SYS_CLK_DIV > ; # [ doc = "Register SYS_CLK_DIV `reset()`'s with value 0x2212" ]
impl crate :: ResetValue for super :: SYS_CLK_DIV { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0x2212 } } impl R { } impl W { } } # [ doc = "调试控制寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [debug_ctrl](debug_ctrl) module" ]
pub type DEBUG_CTRL = crate :: Reg < u32 , _DEBUG_CTRL > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _DEBUG_CTRL ; # [ doc = "`read()` method returns [debug_ctrl::R](debug_ctrl::R) reader structure" ]
impl crate :: Readable for DEBUG_CTRL { } # [ doc = "`write(|w| ..)` method takes [debug_ctrl::W](debug_ctrl::W) writer structure" ]
impl crate :: Writable for DEBUG_CTRL { } # [ doc = "调试控制寄存器" ]
pub mod debug_ctrl { # [ doc = "Reader of register DEBUG_CTRL" ]
pub type R = crate :: R < u32 , super :: DEBUG_CTRL > ; # [ doc = "Writer for register DEBUG_CTRL" ]
pub type W = crate :: W < u32 , super :: DEBUG_CTRL > ; # [ doc = "Register DEBUG_CTRL `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: DEBUG_CTRL { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "I2S时钟控制寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [i2s_clk_ctrl](i2s_clk_ctrl) module" ]
pub type I2S_CLK_CTRL = crate :: Reg < u32 , _I2S_CLK_CTRL > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _I2S_CLK_CTRL ; # [ doc = "`read()` method returns [i2s_clk_ctrl::R](i2s_clk_ctrl::R) reader structure" ]
impl crate :: Readable for I2S_CLK_CTRL { } # [ doc = "`write(|w| ..)` method takes [i2s_clk_ctrl::W](i2s_clk_ctrl::W) writer structure" ]
impl crate :: Writable for I2S_CLK_CTRL { } # [ doc = "I2S时钟控制寄存器" ]
pub mod i2s_clk_ctrl { # [ doc = "Reader of register I2S_CLK_CTRL" ]
pub type R = crate :: R < u32 , super :: I2S_CLK_CTRL > ; # [ doc = "Writer for register I2S_CLK_CTRL" ]
pub type W = crate :: W < u32 , super :: I2S_CLK_CTRL > ; # [ doc = "Register I2S_CLK_CTRL `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: I2S_CLK_CTRL { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } } # [ doc = "Direct Memory Access" ]
pub struct DMA { _marker : PhantomData < * const ( ) > } unsafe impl Send for DMA { } impl DMA { # [ doc = r"Returns a pointer to the register block" ]
# [ inline ( always ) ]
pub const fn ptr ( ) -> * const dma :: RegisterBlock { 0x4000_0000 as * const _ } } impl Deref for DMA { type Target = dma :: RegisterBlock ; # [ inline ( always ) ]
fn deref ( & self ) -> & Self :: Target { unsafe { & * DMA :: ptr ( ) } } } # [ doc = "Direct Memory Access" ]
pub mod dma { # [ doc = r"Register block" ]
# [ repr ( C ) ]
pub struct RegisterBlock { # [ doc = "0x00 - 中断屏蔽寄存器" ]
pub int_mask : INT_MASK , # [ doc = "0x04 - 中断状态寄存器" ]
pub int_src : INT_SRC , # [ doc = "0x08 - UART选择寄存器" ]
pub uart_ch : UART_CH , _reserved3 : [ u8 ; 4usize ]
, # [ doc = "0x10 - DMA源地址寄存器" ]
pub ch0_src_addr : CH_SRC_ADDR , # [ doc = "0x14 - DMA目的地址寄存器" ]
pub ch0_dest_addr : CH_DEST_ADDR , # [ doc = "0x18 - DMA循环源起始地址寄存器" ]
pub ch0_src_wrap_addr : CH_SRC_WRAP_ADDR , # [ doc = "0x1c - DMA循环目的起始地址寄存器" ]
pub ch0_dest_wrap_addr : CH_DEST_WRAP_ADDR , # [ doc = "0x20 - DMA循环长度寄存器" ]
pub ch0_wrap_size : CH_WRAP_SIZE , # [ doc = "0x24 - DMA通道控制寄存器" ]
pub ch0_chnl_ctrl : CH_CHNL_CTRL , # [ doc = "0x28 - DMA模式选择寄存器" ]
pub ch0_dma_mode : CH_DMA_MODE , # [ doc = "0x2c - DMA数据流控制寄存器" ]
pub ch0_dma_ctrl : CH_DMA_CTRL , # [ doc = "0x30 - DMA传输字节数寄存器" ]
pub ch0_dma_status : CH_DMA_STATUS , # [ doc = "0x34 - DMA链表入口地址寄存器" ]
pub ch0_desc_addr : CH_DESC_ADDR , # [ doc = "0x38 - DMA当前目的地址寄存器" ]
pub ch0_cur_dest_addr : CH_CUR_DEST_ADDR , _reserved14 : [ u8 ; 4usize ]
, # [ doc = "0x40 - DMA源地址寄存器" ]
pub ch1_src_addr : CH_SRC_ADDR , # [ doc = "0x44 - DMA目的地址寄存器" ]
pub ch1_dest_addr : CH_DEST_ADDR , # [ doc = "0x48 - DMA循环源起始地址寄存器" ]
pub ch1_src_wrap_addr : CH_SRC_WRAP_ADDR , # [ doc = "0x4c - DMA循环目的起始地址寄存器" ]
pub ch1_dest_wrap_addr : CH_DEST_WRAP_ADDR , # [ doc = "0x50 - DMA循环长度寄存器" ]
pub ch1_wrap_size : CH_WRAP_SIZE , # [ doc = "0x54 - DMA通道控制寄存器" ]
pub ch1_chnl_ctrl : CH_CHNL_CTRL , # [ doc = "0x58 - DMA模式选择寄存器" ]
pub ch1_dma_mode : CH_DMA_MODE , # [ doc = "0x5c - DMA数据流控制寄存器" ]
pub ch1_dma_ctrl : CH_DMA_CTRL , # [ doc = "0x60 - DMA传输字节数寄存器" ]
pub ch1_dma_status : CH_DMA_STATUS , # [ doc = "0x64 - DMA链表入口地址寄存器" ]
pub ch1_desc_addr : CH_DESC_ADDR , # [ doc = "0x68 - DMA当前目的地址寄存器" ]
pub ch1_cur_dest_addr : CH_CUR_DEST_ADDR , _reserved25 : [ u8 ; 4usize ]
, # [ doc = "0x70 - DMA源地址寄存器" ]
pub ch2_src_addr : CH_SRC_ADDR , # [ doc = "0x74 - DMA目的地址寄存器" ]
pub ch2_dest_addr : CH_DEST_ADDR , # [ doc = "0x78 - DMA循环源起始地址寄存器" ]
pub ch2_src_wrap_addr : CH_SRC_WRAP_ADDR , # [ doc = "0x7c - DMA循环目的起始地址寄存器" ]
pub ch2_dest_wrap_addr : CH_DEST_WRAP_ADDR , # [ doc = "0x80 - DMA循环长度寄存器" ]
pub ch2_wrap_size : CH_WRAP_SIZE , # [ doc = "0x84 - DMA通道控制寄存器" ]
pub ch2_chnl_ctrl : CH_CHNL_CTRL , # [ doc = "0x88 - DMA模式选择寄存器" ]
pub ch2_dma_mode : CH_DMA_MODE , # [ doc = "0x8c - DMA数据流控制寄存器" ]
pub ch2_dma_ctrl : CH_DMA_CTRL , # [ doc = "0x90 - DMA传输字节数寄存器" ]
pub ch2_dma_status : CH_DMA_STATUS , # [ doc = "0x94 - DMA链表入口地址寄存器" ]
pub ch2_desc_addr : CH_DESC_ADDR , # [ doc = "0x98 - DMA当前目的地址寄存器" ]
pub ch2_cur_dest_addr : CH_CUR_DEST_ADDR , _reserved36 : [ u8 ; 4usize ]
, # [ doc = "0xa0 - DMA源地址寄存器" ]
pub ch3_src_addr : CH_SRC_ADDR , # [ doc = "0xa4 - DMA目的地址寄存器" ]
pub ch3_dest_addr : CH_DEST_ADDR , # [ doc = "0xa8 - DMA循环源起始地址寄存器" ]
pub ch3_src_wrap_addr : CH_SRC_WRAP_ADDR , # [ doc = "0xac - DMA循环目的起始地址寄存器" ]
pub ch3_dest_wrap_addr : CH_DEST_WRAP_ADDR , # [ doc = "0xb0 - DMA循环长度寄存器" ]
pub ch3_wrap_size : CH_WRAP_SIZE , # [ doc = "0xb4 - DMA通道控制寄存器" ]
pub ch3_chnl_ctrl : CH_CHNL_CTRL , # [ doc = "0xb8 - DMA模式选择寄存器" ]
pub ch3_dma_mode : CH_DMA_MODE , # [ doc = "0xbc - DMA数据流控制寄存器" ]
pub ch3_dma_ctrl : CH_DMA_CTRL , # [ doc = "0xc0 - DMA传输字节数寄存器" ]
pub ch3_dma_status : CH_DMA_STATUS , # [ doc = "0xc4 - DMA链表入口地址寄存器" ]
pub ch3_desc_addr : CH_DESC_ADDR , # [ doc = "0xc8 - DMA当前目的地址寄存器" ]
pub ch3_cur_dest_addr : CH_CUR_DEST_ADDR , _reserved47 : [ u8 ; 4usize ]
, # [ doc = "0xd0 - DMA源地址寄存器" ]
pub ch4_src_addr : CH_SRC_ADDR , # [ doc = "0xd4 - DMA目的地址寄存器" ]
pub ch4_dest_addr : CH_DEST_ADDR , # [ doc = "0xd8 - DMA循环源起始地址寄存器" ]
pub ch4_src_wrap_addr : CH_SRC_WRAP_ADDR , # [ doc = "0xdc - DMA循环目的起始地址寄存器" ]
pub ch4_dest_wrap_addr : CH_DEST_WRAP_ADDR , # [ doc = "0xe0 - DMA循环长度寄存器" ]
pub ch4_wrap_size : CH_WRAP_SIZE , # [ doc = "0xe4 - DMA通道控制寄存器" ]
pub ch4_chnl_ctrl : CH_CHNL_CTRL , # [ doc = "0xe8 - DMA模式选择寄存器" ]
pub ch4_dma_mode : CH_DMA_MODE , # [ doc = "0xec - DMA数据流控制寄存器" ]
pub ch4_dma_ctrl : CH_DMA_CTRL , # [ doc = "0xf0 - DMA传输字节数寄存器" ]
pub ch4_dma_status : CH_DMA_STATUS , # [ doc = "0xf4 - DMA链表入口地址寄存器" ]
pub ch4_desc_addr : CH_DESC_ADDR , # [ doc = "0xf8 - DMA当前目的地址寄存器" ]
pub ch4_cur_dest_addr : CH_CUR_DEST_ADDR , _reserved58 : [ u8 ; 4usize ]
, # [ doc = "0x100 - DMA源地址寄存器" ]
pub ch5_src_addr : CH_SRC_ADDR , # [ doc = "0x104 - DMA目的地址寄存器" ]
pub ch5_dest_addr : CH_DEST_ADDR , # [ doc = "0x108 - DMA循环源起始地址寄存器" ]
pub ch5_src_wrap_addr : CH_SRC_WRAP_ADDR , # [ doc = "0x10c - DMA循环目的起始地址寄存器" ]
pub ch5_dest_wrap_addr : CH_DEST_WRAP_ADDR , # [ doc = "0x110 - DMA循环长度寄存器" ]
pub ch5_wrap_size : CH_WRAP_SIZE , # [ doc = "0x114 - DMA通道控制寄存器" ]
pub ch5_chnl_ctrl : CH_CHNL_CTRL , # [ doc = "0x118 - DMA模式选择寄存器" ]
pub ch5_dma_mode : CH_DMA_MODE , # [ doc = "0x11c - DMA数据流控制寄存器" ]
pub ch5_dma_ctrl : CH_DMA_CTRL , # [ doc = "0x120 - DMA传输字节数寄存器" ]
pub ch5_dma_status : CH_DMA_STATUS , # [ doc = "0x124 - DMA链表入口地址寄存器" ]
pub ch5_desc_addr : CH_DESC_ADDR , # [ doc = "0x128 - DMA当前目的地址寄存器" ]
pub ch5_cur_dest_addr : CH_CUR_DEST_ADDR , _reserved69 : [ u8 ; 4usize ]
, # [ doc = "0x130 - DMA源地址寄存器" ]
pub ch6_src_addr : CH_SRC_ADDR , # [ doc = "0x134 - DMA目的地址寄存器" ]
pub ch6_dest_addr : CH_DEST_ADDR , # [ doc = "0x138 - DMA循环源起始地址寄存器" ]
pub ch6_src_wrap_addr : CH_SRC_WRAP_ADDR , # [ doc = "0x13c - DMA循环目的起始地址寄存器" ]
pub ch6_dest_wrap_addr : CH_DEST_WRAP_ADDR , # [ doc = "0x140 - DMA循环长度寄存器" ]
pub ch6_wrap_size : CH_WRAP_SIZE , # [ doc = "0x144 - DMA通道控制寄存器" ]
pub ch6_chnl_ctrl : CH_CHNL_CTRL , # [ doc = "0x148 - DMA模式选择寄存器" ]
pub ch6_dma_mode : CH_DMA_MODE , # [ doc = "0x14c - DMA数据流控制寄存器" ]
pub ch6_dma_ctrl : CH_DMA_CTRL , # [ doc = "0x150 - DMA传输字节数寄存器" ]
pub ch6_dma_status : CH_DMA_STATUS , # [ doc = "0x154 - DMA链表入口地址寄存器" ]
pub ch6_desc_addr : CH_DESC_ADDR , # [ doc = "0x158 - DMA当前目的地址寄存器" ]
pub ch6_cur_dest_addr : CH_CUR_DEST_ADDR , _reserved80 : [ u8 ; 4usize ]
, # [ doc = "0x160 - DMA源地址寄存器" ]
pub ch7_src_addr : CH_SRC_ADDR , # [ doc = "0x164 - DMA目的地址寄存器" ]
pub ch7_dest_addr : CH_DEST_ADDR , # [ doc = "0x168 - DMA循环源起始地址寄存器" ]
pub ch7_src_wrap_addr : CH_SRC_WRAP_ADDR , # [ doc = "0x16c - DMA循环目的起始地址寄存器" ]
pub ch7_dest_wrap_addr : CH_DEST_WRAP_ADDR , # [ doc = "0x170 - DMA循环长度寄存器" ]
pub ch7_wrap_size : CH_WRAP_SIZE , # [ doc = "0x174 - DMA通道控制寄存器" ]
pub ch7_chnl_ctrl : CH_CHNL_CTRL , # [ doc = "0x178 - DMA模式选择寄存器" ]
pub ch7_dma_mode : CH_DMA_MODE , # [ doc = "0x17c - DMA数据流控制寄存器" ]
pub ch7_dma_ctrl : CH_DMA_CTRL , # [ doc = "0x180 - DMA传输字节数寄存器" ]
pub ch7_dma_status : CH_DMA_STATUS , # [ doc = "0x184 - DMA链表入口地址寄存器" ]
pub ch7_desc_addr : CH_DESC_ADDR , # [ doc = "0x188 - DMA当前目的地址寄存器" ]
pub ch7_cur_dest_addr : CH_CUR_DEST_ADDR , } # [ doc = "中断屏蔽寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [int_mask](int_mask) module" ]
pub type INT_MASK = crate :: Reg < u32 , _INT_MASK > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _INT_MASK ; # [ doc = "`read()` method returns [int_mask::R](int_mask::R) reader structure" ]
impl crate :: Readable for INT_MASK { } # [ doc = "`write(|w| ..)` method takes [int_mask::W](int_mask::W) writer structure" ]
impl crate :: Writable for INT_MASK { } # [ doc = "中断屏蔽寄存器" ]
pub mod int_mask { # [ doc = "Reader of register INT_MASK" ]
pub type R = crate :: R < u32 , super :: INT_MASK > ; # [ doc = "Writer for register INT_MASK" ]
pub type W = crate :: W < u32 , super :: INT_MASK > ; # [ doc = "Register INT_MASK `reset()`'s with value 0xffff" ]
impl crate :: ResetValue for super :: INT_MASK { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0xffff } } impl R { } impl W { } } # [ doc = "中断状态寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [int_src](int_src) module" ]
pub type INT_SRC = crate :: Reg < u32 , _INT_SRC > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _INT_SRC ; # [ doc = "`read()` method returns [int_src::R](int_src::R) reader structure" ]
impl crate :: Readable for INT_SRC { } # [ doc = "`write(|w| ..)` method takes [int_src::W](int_src::W) writer structure" ]
impl crate :: Writable for INT_SRC { } # [ doc = "中断状态寄存器" ]
pub mod int_src { # [ doc = "Reader of register INT_SRC" ]
pub type R = crate :: R < u32 , super :: INT_SRC > ; # [ doc = "Writer for register INT_SRC" ]
pub type W = crate :: W < u32 , super :: INT_SRC > ; # [ doc = "Register INT_SRC `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: INT_SRC { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "UART选择寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [uart_ch](uart_ch) module" ]
pub type UART_CH = crate :: Reg < u32 , _UART_CH > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _UART_CH ; # [ doc = "`read()` method returns [uart_ch::R](uart_ch::R) reader structure" ]
impl crate :: Readable for UART_CH { } # [ doc = "`write(|w| ..)` method takes [uart_ch::W](uart_ch::W) writer structure" ]
impl crate :: Writable for UART_CH { } # [ doc = "UART选择寄存器" ]
pub mod uart_ch { # [ doc = "Reader of register UART_CH" ]
pub type R = crate :: R < u32 , super :: UART_CH > ; # [ doc = "Writer for register UART_CH" ]
pub type W = crate :: W < u32 , super :: UART_CH > ; # [ doc = "Register UART_CH `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: UART_CH { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA源地址寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_src_addr](ch_src_addr) module" ]
pub type CH_SRC_ADDR = crate :: Reg < u32 , _CH_SRC_ADDR > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_SRC_ADDR ; # [ doc = "`read()` method returns [ch_src_addr::R](ch_src_addr::R) reader structure" ]
impl crate :: Readable for CH_SRC_ADDR { } # [ doc = "`write(|w| ..)` method takes [ch_src_addr::W](ch_src_addr::W) writer structure" ]
impl crate :: Writable for CH_SRC_ADDR { } # [ doc = "DMA源地址寄存器" ]
pub mod ch_src_addr { # [ doc = "Reader of register CH%s_SRC_ADDR" ]
pub type R = crate :: R < u32 , super :: CH_SRC_ADDR > ; # [ doc = "Writer for register CH%s_SRC_ADDR" ]
pub type W = crate :: W < u32 , super :: CH_SRC_ADDR > ; # [ doc = "Register CH%s_SRC_ADDR `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_SRC_ADDR { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA目的地址寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_dest_addr](ch_dest_addr) module" ]
pub type CH_DEST_ADDR = crate :: Reg < u32 , _CH_DEST_ADDR > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_DEST_ADDR ; # [ doc = "`read()` method returns [ch_dest_addr::R](ch_dest_addr::R) reader structure" ]
impl crate :: Readable for CH_DEST_ADDR { } # [ doc = "`write(|w| ..)` method takes [ch_dest_addr::W](ch_dest_addr::W) writer structure" ]
impl crate :: Writable for CH_DEST_ADDR { } # [ doc = "DMA目的地址寄存器" ]
pub mod ch_dest_addr { # [ doc = "Reader of register CH%s_DEST_ADDR" ]
pub type R = crate :: R < u32 , super :: CH_DEST_ADDR > ; # [ doc = "Writer for register CH%s_DEST_ADDR" ]
pub type W = crate :: W < u32 , super :: CH_DEST_ADDR > ; # [ doc = "Register CH%s_DEST_ADDR `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_DEST_ADDR { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA循环源起始地址寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_src_wrap_addr](ch_src_wrap_addr) module" ]
pub type CH_SRC_WRAP_ADDR = crate :: Reg < u32 , _CH_SRC_WRAP_ADDR > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_SRC_WRAP_ADDR ; # [ doc = "`read()` method returns [ch_src_wrap_addr::R](ch_src_wrap_addr::R) reader structure" ]
impl crate :: Readable for CH_SRC_WRAP_ADDR { } # [ doc = "`write(|w| ..)` method takes [ch_src_wrap_addr::W](ch_src_wrap_addr::W) writer structure" ]
impl crate :: Writable for CH_SRC_WRAP_ADDR { } # [ doc = "DMA循环源起始地址寄存器" ]
pub mod ch_src_wrap_addr { # [ doc = "Reader of register CH%s_SRC_WRAP_ADDR" ]
pub type R = crate :: R < u32 , super :: CH_SRC_WRAP_ADDR > ; # [ doc = "Writer for register CH%s_SRC_WRAP_ADDR" ]
pub type W = crate :: W < u32 , super :: CH_SRC_WRAP_ADDR > ; # [ doc = "Register CH%s_SRC_WRAP_ADDR `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_SRC_WRAP_ADDR { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA循环目的起始地址寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_dest_wrap_addr](ch_dest_wrap_addr) module" ]
pub type CH_DEST_WRAP_ADDR = crate :: Reg < u32 , _CH_DEST_WRAP_ADDR > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_DEST_WRAP_ADDR ; # [ doc = "`read()` method returns [ch_dest_wrap_addr::R](ch_dest_wrap_addr::R) reader structure" ]
impl crate :: Readable for CH_DEST_WRAP_ADDR { } # [ doc = "`write(|w| ..)` method takes [ch_dest_wrap_addr::W](ch_dest_wrap_addr::W) writer structure" ]
impl crate :: Writable for CH_DEST_WRAP_ADDR { } # [ doc = "DMA循环目的起始地址寄存器" ]
pub mod ch_dest_wrap_addr { # [ doc = "Reader of register CH%s_DEST_WRAP_ADDR" ]
pub type R = crate :: R < u32 , super :: CH_DEST_WRAP_ADDR > ; # [ doc = "Writer for register CH%s_DEST_WRAP_ADDR" ]
pub type W = crate :: W < u32 , super :: CH_DEST_WRAP_ADDR > ; # [ doc = "Register CH%s_DEST_WRAP_ADDR `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_DEST_WRAP_ADDR { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA循环长度寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_wrap_size](ch_wrap_size) module" ]
pub type CH_WRAP_SIZE = crate :: Reg < u32 , _CH_WRAP_SIZE > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_WRAP_SIZE ; # [ doc = "`read()` method returns [ch_wrap_size::R](ch_wrap_size::R) reader structure" ]
impl crate :: Readable for CH_WRAP_SIZE { } # [ doc = "`write(|w| ..)` method takes [ch_wrap_size::W](ch_wrap_size::W) writer structure" ]
impl crate :: Writable for CH_WRAP_SIZE { } # [ doc = "DMA循环长度寄存器" ]
pub mod ch_wrap_size { # [ doc = "Reader of register CH%s_WRAP_SIZE" ]
pub type R = crate :: R < u32 , super :: CH_WRAP_SIZE > ; # [ doc = "Writer for register CH%s_WRAP_SIZE" ]
pub type W = crate :: W < u32 , super :: CH_WRAP_SIZE > ; # [ doc = "Register CH%s_WRAP_SIZE `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_WRAP_SIZE { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA通道控制寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_chnl_ctrl](ch_chnl_ctrl) module" ]
pub type CH_CHNL_CTRL = crate :: Reg < u32 , _CH_CHNL_CTRL > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_CHNL_CTRL ; # [ doc = "`read()` method returns [ch_chnl_ctrl::R](ch_chnl_ctrl::R) reader structure" ]
impl crate :: Readable for CH_CHNL_CTRL { } # [ doc = "`write(|w| ..)` method takes [ch_chnl_ctrl::W](ch_chnl_ctrl::W) writer structure" ]
impl crate :: Writable for CH_CHNL_CTRL { } # [ doc = "DMA通道控制寄存器" ]
pub mod ch_chnl_ctrl { # [ doc = "Reader of register CH%s_CHNL_CTRL" ]
pub type R = crate :: R < u32 , super :: CH_CHNL_CTRL > ; # [ doc = "Writer for register CH%s_CHNL_CTRL" ]
pub type W = crate :: W < u32 , super :: CH_CHNL_CTRL > ; # [ doc = "Register CH%s_CHNL_CTRL `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_CHNL_CTRL { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA模式选择寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_dma_mode](ch_dma_mode) module" ]
pub type CH_DMA_MODE = crate :: Reg < u32 , _CH_DMA_MODE > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_DMA_MODE ; # [ doc = "`read()` method returns [ch_dma_mode::R](ch_dma_mode::R) reader structure" ]
impl crate :: Readable for CH_DMA_MODE { } # [ doc = "`write(|w| ..)` method takes [ch_dma_mode::W](ch_dma_mode::W) writer structure" ]
impl crate :: Writable for CH_DMA_MODE { } # [ doc = "DMA模式选择寄存器" ]
pub mod ch_dma_mode { # [ doc = "Reader of register CH%s_DMA_MODE" ]
pub type R = crate :: R < u32 , super :: CH_DMA_MODE > ; # [ doc = "Writer for register CH%s_DMA_MODE" ]
pub type W = crate :: W < u32 , super :: CH_DMA_MODE > ; # [ doc = "Register CH%s_DMA_MODE `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_DMA_MODE { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA数据流控制寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_dma_ctrl](ch_dma_ctrl) module" ]
pub type CH_DMA_CTRL = crate :: Reg < u32 , _CH_DMA_CTRL > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_DMA_CTRL ; # [ doc = "`read()` method returns [ch_dma_ctrl::R](ch_dma_ctrl::R) reader structure" ]
impl crate :: Readable for CH_DMA_CTRL { } # [ doc = "`write(|w| ..)` method takes [ch_dma_ctrl::W](ch_dma_ctrl::W) writer structure" ]
impl crate :: Writable for CH_DMA_CTRL { } # [ doc = "DMA数据流控制寄存器" ]
pub mod ch_dma_ctrl { # [ doc = "Reader of register CH%s_DMA_CTRL" ]
pub type R = crate :: R < u32 , super :: CH_DMA_CTRL > ; # [ doc = "Writer for register CH%s_DMA_CTRL" ]
pub type W = crate :: W < u32 , super :: CH_DMA_CTRL > ; # [ doc = "Register CH%s_DMA_CTRL `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_DMA_CTRL { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA传输字节数寄存器\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_dma_status](ch_dma_status) module" ]
pub type CH_DMA_STATUS = crate :: Reg < u32 , _CH_DMA_STATUS > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_DMA_STATUS ; # [ doc = "`read()` method returns [ch_dma_status::R](ch_dma_status::R) reader structure" ]
impl crate :: Readable for CH_DMA_STATUS { } # [ doc = "DMA传输字节数寄存器" ]
pub mod ch_dma_status { # [ doc = "Reader of register CH%s_DMA_STATUS" ]
pub type R = crate :: R < u32 , super :: CH_DMA_STATUS > ; impl R { } } # [ doc = "DMA链表入口地址寄存器\n\nThis register you can [`read`](crate::generic::Reg::read), [`reset`](crate::generic::Reg::reset), [`write`](crate::generic::Reg::write), [`write_with_zero`](crate::generic::Reg::write_with_zero), [`modify`](crate::generic::Reg::modify). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_desc_addr](ch_desc_addr) module" ]
pub type CH_DESC_ADDR = crate :: Reg < u32 , _CH_DESC_ADDR > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_DESC_ADDR ; # [ doc = "`read()` method returns [ch_desc_addr::R](ch_desc_addr::R) reader structure" ]
impl crate :: Readable for CH_DESC_ADDR { } # [ doc = "`write(|w| ..)` method takes [ch_desc_addr::W](ch_desc_addr::W) writer structure" ]
impl crate :: Writable for CH_DESC_ADDR { } # [ doc = "DMA链表入口地址寄存器" ]
pub mod ch_desc_addr { # [ doc = "Reader of register CH%s_DESC_ADDR" ]
pub type R = crate :: R < u32 , super :: CH_DESC_ADDR > ; # [ doc = "Writer for register CH%s_DESC_ADDR" ]
pub type W = crate :: W < u32 , super :: CH_DESC_ADDR > ; # [ doc = "Register CH%s_DESC_ADDR `reset()`'s with value 0" ]
impl crate :: ResetValue for super :: CH_DESC_ADDR { type Type = u32 ; # [ inline ( always ) ]
fn reset_value ( ) -> Self :: Type { 0 } } impl R { } impl W { } } # [ doc = "DMA当前目的地址寄存器\n\nThis register you can [`read`](crate::generic::Reg::read). See [API](https://docs.rs/svd2rust/#read--modify--write-api).\n\nFor information about available fields see [ch_cur_dest_addr](ch_cur_dest_addr) module" ]
pub type CH_CUR_DEST_ADDR = crate :: Reg < u32 , _CH_CUR_DEST_ADDR > ; # [ allow ( missing_docs ) ]
# [ doc ( hidden ) ]
pub struct _CH_CUR_DEST_ADDR ; # [ doc = "`read()` method returns [ch_cur_dest_addr::R](ch_cur_dest_addr::R) reader structure" ]
impl crate :: Readable for CH_CUR_DEST_ADDR { } # [ doc = "DMA当前目的地址寄存器" ]
pub mod ch_cur_dest_addr { # [ doc = "Reader of register CH%s_CUR_DEST_ADDR" ]
pub type R = crate :: R < u32 , super :: CH_CUR_DEST_ADDR > ; impl R { } } } # [ no_mangle ]
static mut DEVICE_PERIPHERALS : bool = false ; # [ doc = r"All the peripherals" ]
# [ allow ( non_snake_case ) ]
pub struct Peripherals { # [ doc = "CLK" ]
pub CLK : CLK , # [ doc = "DMA" ]
pub DMA : DMA , } impl Peripherals { # [ doc = r"Returns all the peripherals *once*" ]
# [ inline ]
pub fn take ( ) -> Option < Self > { cortex_m :: interrupt :: free ( | _ | { if unsafe { DEVICE_PERIPHERALS } { None } else { Some ( unsafe { Peripherals :: steal ( ) } ) } } ) } # [ doc = r"Unchecked version of `Peripherals::take`" ]
# [ inline ]
pub unsafe fn steal ( ) -> Self { DEVICE_PERIPHERALS = true ; Peripherals { CLK : CLK { _marker : PhantomData } , DMA : DMA { _marker : PhantomData } , } } }